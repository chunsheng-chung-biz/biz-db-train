

/* Create Tables */

-- Browser Table
CREATE TABLE BROWSER
(
	BROWSER_ID BIGINT NOT NULL AUTO_INCREMENT COMMENT 'Browser ID',
	COOKIE BLOB NOT NULL COMMENT 'cookie',
	CREATED_AT DATETIME NOT NULL COMMENT 'Record creation date',
	UPDATED_AT DATETIME NOT NULL COMMENT 'Record update date',
	PRIMARY KEY (BROWSER_ID)
) ENGINE = InnoDB COMMENT = 'Browser : Browser Table';


-- Table for logged in users on specific browsers
CREATE TABLE BROWSER_USER
(
	ID BIGINT NOT NULL AUTO_INCREMENT COMMENT 'ID',
	USER_ID BIGINT NOT NULL COMMENT 'User ID : Unique UID in database as primary key.',
	BROWSER_D BIGINT NOT NULL COMMENT 'Browser ID',
	CREATED_AT DATETIME NOT NULL COMMENT 'Record creation date',
	UPDATED_AT DATETIME NOT NULL COMMENT 'Record update date',
	PRIMARY KEY (ID)
) ENGINE = InnoDB COMMENT = 'Browser-User : Table for logged in users on specific browsers';


-- Global country table for the system.
CREATE TABLE COUNTRY
(
	COUNTRY_ID BIGINT NOT NULL AUTO_INCREMENT COMMENT 'Country ID',
	COUNTRY_NAME VARCHAR(100) COMMENT 'Country Name',
	CREATED_AT DATETIME NOT NULL COMMENT 'Record creation date',
	UPDATED_AT DATETIME NOT NULL COMMENT 'Record update date',
	PRIMARY KEY (COUNTRY_ID)
) ENGINE = InnoDB COMMENT = 'Country : Global country table for the system.';


-- Global language table for the system.
CREATE TABLE DISPLAY_LANGUAGE
(
	DISPLAY_LANGUAGE_ID BIGINT NOT NULL AUTO_INCREMENT COMMENT 'Display Language ID',
	DISPLAY_LANGUAGE_NAME VARCHAR(100) NOT NULL COMMENT 'Display Language Name',
	CREATED_AT DATETIME NOT NULL COMMENT 'Record creation date',
	UPDATED_AT DATETIME NOT NULL COMMENT 'Record update date',
	PRIMARY KEY (DISPLAY_LANGUAGE_ID)
) ENGINE = InnoDB COMMENT = 'Didsplay Language : Global language table for the system.';


-- Table for folloing/followed relationshoip
CREATE TABLE FOLLOW
(
	FID BIGINT NOT NULL AUTO_INCREMENT COMMENT 'Follow ID',
	FOLLOWER_ID BIGINT NOT NULL COMMENT 'Follower ID : ID of the following user',
	FOLLOWED_ID BIGINT NOT NULL COMMENT 'Followed ID : USER_ID of the user being followed',
	CREATED_AT DATETIME NOT NULL COMMENT 'Record creation date',
	UPDATED_AT DATETIME NOT NULL COMMENT 'Record update date',
	PRIMARY KEY (FID)
) ENGINE = InnoDB COMMENT = 'Follow : Table for folloing/followed relationshoip';


-- THIS IS A TWEET TABLE.
CREATE TABLE TWEET
(
	TWEET_ID BIGINT NOT NULL AUTO_INCREMENT COMMENT 'tweet_id',
	POSTER_ID BIGINT NOT NULL COMMENT 'poster_id : Unique UID in database as primary key.',
	TEXT VARCHAR(280) NOT NULL COMMENT 'text',
	CREATED_AT DATETIME NOT NULL COMMENT 'Record creation date',
	UPDATED_AT DATETIME NOT NULL COMMENT 'Record update date',
	REPLIED_TO_TWEET_ID BIGINT NOT NULL COMMENT 'Replied to Tweet ID',
	RETWEET_TO_TWEET_ID BIGINT NOT NULL COMMENT 'Retweet to Tweet ID',
	PRIMARY KEY (TWEET_ID)
) ENGINE = InnoDB COMMENT = 'tweet : THIS IS A TWEET TABLE.';


-- This is tweet image table.
CREATE TABLE TWEET_IMAGE
(
	TWEET_ID BIGINT NOT NULL COMMENT 'tweet_id',
	IMAGE BLOB NOT NULL COMMENT 'image',
	CREATED_AT DATETIME NOT NULL COMMENT 'Record creation date',
	UPDATED_AT DATETIME NOT NULL COMMENT 'Record update date',
	IMAGE_NUMBER SMALLINT NOT NULL COMMENT 'image_number',
	PRIMARY KEY (TWEET_ID)
) ENGINE = InnoDB COMMENT = 'tweet_image : This is tweet image table.';


-- User information
CREATE TABLE USER
(
	UID BIGINT NOT NULL AUTO_INCREMENT COMMENT 'User ID : Unique UID in database as primary key.',
	EMAIL VARCHAR(127) NOT NULL COMMENT 'Email address : Email address of the user. Also used as login information.',
	PASSWORD_HASH VARCHAR(255) NOT NULL COMMENT 'Hashed password',
	PASSWORD_SALT CHAR(32) NOT NULL COMMENT 'Password salt : Random password salt for each user',
	LAST_LOGIN_AT DATETIME COMMENT 'Last login',
	CREATED_AT DATETIME NOT NULL COMMENT 'Record creation date',
	UPDATED_AT DATETIME NOT NULL COMMENT 'Record update date',
	PRIMARY KEY (UID)
) ENGINE = InnoDB COMMENT = 'User : User information';


-- Profile of user account.
CREATE TABLE USER_PROF
(
	USER_PROF_ID BIGINT NOT NULL AUTO_INCREMENT COMMENT 'User Profile ID : Unique UID in database as primary key.',
	USERNAME VARCHAR(20) NOT NULL COMMENT 'Username : Unique user id for @ mention etc.',
	NICKNAME VARCHAR(20) NOT NULL COMMENT 'Nickname : Displayed nickname for the account',
	PHONE_NUMBER VARCHAR(20) COMMENT 'Phone number',
	DATE_OF_BIRTH_AT DATE COMMENT 'Birthdate',
	ADDRESS VARCHAR(255) COMMENT 'Address',
	DISPLAY_LANGUAGE_ID BIGINT NOT NULL COMMENT 'Display Language ID',
	COUNTRY_ID BIGINT NOT NULL COMMENT 'Country ID',
	LOCATION VARCHAR(127) COMMENT 'Location',
	URL VARCHAR(255) COMMENT 'URL',
	PORTRAIT BLOB COMMENT 'Portrait',
	HEADER_IMAGE BLOB COMMENT 'Header image',
	BIO VARCHAR(1023) COMMENT 'biography',
	CREATED_AT DATETIME NOT NULL COMMENT 'Record creation date',
	UPDATED_AT DATETIME NOT NULL COMMENT 'Record update date',
	PRIMARY KEY (USER_PROF_ID)
) ENGINE = InnoDB COMMENT = 'User Profile : Profile of user account.';



/* Create Indexes */

CREATE UNIQUE INDEX UQ_COUNTRY_COUNTRY_ID USING BTREE ON COUNTRY (COUNTRY_ID ASC);
CREATE UNIQUE INDEX UQ_DISPLAY_LANGUAGE_DISPLAY_LANGUAGE_ID USING BTREE ON DISPLAY_LANGUAGE (DISPLAY_LANGUAGE_ID ASC);
CREATE UNIQUE INDEX UQ_FOLLOW_FID USING BTREE ON FOLLOW (FID ASC);
CREATE INDEX IX_FOLLOW_FOLLOWER_ID USING BTREE ON FOLLOW (FOLLOWER_ID ASC);
CREATE INDEX IX_FOLLOW_FOLLOWED_ID USING BTREE ON FOLLOW (FOLLOWED_ID ASC);
CREATE UNIQUE INDEX UQ_FOLLOW_FOLLOWER_FOLLOWED USING BTREE ON FOLLOW (FOLLOWER_ID ASC, FOLLOWED_ID ASC);
CREATE INDEX IX_TWEET_RETWEET_TO_TWEET_ID USING BTREE ON TWEET (RETWEET_TO_TWEET_ID ASC);
CREATE INDEX IX_TWEET_REPLIED_TO_TWEET_ID USING BTREE ON TWEET (REPLIED_TO_TWEET_ID ASC);
CREATE INDEX IX_TWEET_UPDATE_AT USING BTREE ON TWEET (UPDATED_AT ASC);
CREATE INDEX IX_TWEET_CREATED_AT USING BTREE ON TWEET (CREATED_AT ASC);
CREATE INDEX IX_TWEET_POSTER_ID USING BTREE ON TWEET (POSTER_ID ASC);
CREATE UNIQUE INDEX UQ_TWEET_TWEET_ID USING BTREE ON TWEET (TWEET_ID ASC);
CREATE UNIQUE INDEX UQ_TWEET_IMAGE_TWEET_ID_IMAGE_NUMBER USING BTREE ON TWEET_IMAGE (TWEET_ID ASC, IMAGE_NUMBER ASC);
CREATE UNIQUE INDEX UQ_USER_UID USING BTREE ON USER (UID ASC);
CREATE UNIQUE INDEX UQ_USER_EMAIL USING BTREE ON USER (EMAIL ASC);
CREATE UNIQUE INDEX UQ_USER_PROF_USER_PROF_ID USING BTREE ON USER_PROF (USER_PROF_ID ASC);
CREATE UNIQUE INDEX UQ_USER_PROF_USERNAME USING BTREE ON USER_PROF (USERNAME ASC);



/* Create Foreign Keys */

ALTER TABLE BROWSER_USER
	ADD CONSTRAINT FK_BROWSER_USER_BROWSER FOREIGN KEY (BROWSER_D)
	REFERENCES BROWSER (BROWSER_ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE USER_PROF
	ADD CONSTRAINT FK_USER_PROF_COUNTRY FOREIGN KEY (COUNTRY_ID)
	REFERENCES COUNTRY (COUNTRY_ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE USER_PROF
	ADD CONSTRAINT FK_USER_PROF_DISPLAY_LANGUAGE FOREIGN KEY (DISPLAY_LANGUAGE_ID)
	REFERENCES DISPLAY_LANGUAGE (DISPLAY_LANGUAGE_ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE TWEET
	ADD CONSTRAINT FK_TWEET_RETWEET FOREIGN KEY (REPLIED_TO_TWEET_ID)
	REFERENCES TWEET (TWEET_ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE TWEET
	ADD CONSTRAINT FK_TWEET_REPLY FOREIGN KEY (RETWEET_TO_TWEET_ID)
	REFERENCES TWEET (TWEET_ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE TWEET_IMAGE
	ADD CONSTRAINT FK_TWEET_IMAGE_TWEET FOREIGN KEY (TWEET_ID)
	REFERENCES TWEET (TWEET_ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE BROWSER_USER
	ADD CONSTRAINT FK_BROWSER_USER_USER FOREIGN KEY (USER_ID)
	REFERENCES USER (UID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE FOLLOW
	ADD CONSTRAINT FK_FOLLOWER FOREIGN KEY (FOLLOWER_ID)
	REFERENCES USER (UID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE FOLLOW
	ADD CONSTRAINT FK_FOLLOWED FOREIGN KEY (FOLLOWED_ID)
	REFERENCES USER (UID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE TWEET
	ADD CONSTRAINT FK_TWEET_USER FOREIGN KEY (POSTER_ID)
	REFERENCES USER (UID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE USER_PROF
	ADD CONSTRAINT FK_USER_PROF_USER FOREIGN KEY (USER_PROF_ID)
	REFERENCES USER (UID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;



